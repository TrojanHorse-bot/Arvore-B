#ifndef TREE_NODES_H
    #define TREE_NODES_H

    #include <time.h>

    enum _Color {Red, Black, BLACK};
    typedef enum _Color color;

    /* Valor individual de uma chave no n√≥ */
    typedef struct key {
        int key;                /* √çndice do valor */
        char * name;            /* Ponteiro para a String de nome do valor */
        struct tm *node_time;   /* Timestamp da key */
        int value;              /* Valor num√©rico da chave */
    } key;

    /* Struct de um n√≥ da √°rvore B */
    /* Um ponteiro √© a mesma coisa que um array [] sem tamanho*/
    /* A implementa√ß√£o de ponteiros para ponteiros ao inv√©s de ponteiros √∫nicos facilita as opera√ß√µes de rebalanceamento da √°rvore */
    /* N√£o tenha medo de ponteiros de ponteiros, eles s√£o seus amigos ‡¥¶‡µç‡¥¶‡¥ø(Àò‚ÄøÀò) */
    typedef struct Bnode {
        int size;               /* N√∫mero de chaves armazenadas no n√≥ */
        key ** keys;            /* Vetor de endere√ßos das chaves do n√≥ */

        struct Bnode ** children; /* Vetor de endere√ßos das crian√ßas do n√≥ */

        bool leaf;              /* Indica se o n√≥ √© folha ou n√£o */
    } Bnode;

    /* Struct de um n√≥ da √°rvore red-black */
    typedef struct RBnode {
        key * key;      /* Chave do n√≥*/
        color color;    /* Cor do n√≥ */

        struct RBnode * left = null;
        struct RBnode * right = null;
        struct RBnode * parent = null;

    } RBnode

    /* √Årvore B üêù */
    typedef struct Btree {
        int N;  /* N da √°rvore */
        Bnode * root; /* Ra√≠z da √°rvore */
    } Btree

    /* √Årvore Red-Black */
    /* Sim, √© s√≥ um wrapper pro c√≥digo ser mais leg√≠vel */
    typedef struct RBtree {
        RBnode * root;    /* Ra√≠z da √°rvore */
    } RBtree

#endif